   
#ifndef HASHALGORITHM_HPP
#define HASHALGORITHM_HPP

#include <iostream>
#include <bitset>
#include <sstream>
#include <iomanip>
#include <vector>
#include <stdexcept>

// --------------------------------------
// USAGE 
// -> HashV1(string) -> string(hex hash)
// -> HashV2(string) -> string(hex hash)
// -> HashV3(string) -> string(hex hash)
// --------------------------------------

using namespace std;

struct Block {
    bitset<512> M;    // 512 bit block
    bitset<32> W[64]; // 64 psudo-random 32 bit words
};

struct Hash {
    bitset<256> hash; // 256 bit hash
};

bitset<32> Ch(bitset<32> x, bitset<32> y, bitset<32> z); 
bitset<32> Maj(bitset<32> x, bitset<32> y, bitset<32> z);
bitset<32> RotR(bitset<32> x, unsigned int n); // shift right circular
bitset<32> RotR(bitset<8> x, unsigned int n);
bitset<32> ShR(bitset<32> x, unsigned int n); // shift right normal
bitset<32> sum0(bitset<32> x);
bitset<32> sum1(bitset<32> x);
bitset<32> sig0(bitset<32> x);
bitset<32> sig1(bitset<32> x);
bitset<32> SubBitset(bitset<512> b, int start);
bitset<8> SubBitset(bitset<64> b, int start);
Block& DecomposeBlock(Block& block);
bitset<32> operator+(const bitset<32>& lhs, const bitset<32>& rhs);
string operator&(const Hash& h);
Hash ComputeSHA256(vector<Block>& blocks, int num_rounds);
Hash ComputeHashV3(vector<Block>& blocks, int num_rounds);
bitset<256> ConcatBitsets(bitset<32> sets[8]);
bitset<512> ConcatBitsets(bitset<8> sets[64]);
vector<Block> StringToBit(string str);
string HashV1(string input);
string HashV2(string input);
string HashV3(string input);

/*---------------------------------------------------------------*/

bitset<32> Ch(bitset<32> x, bitset<32> y, bitset<32> z) {
    return (x & y) ^ (~x & z);
}
bitset<32> Maj(bitset<32> x, bitset<32> y, bitset<32> z) {
    return (x & y) ^ (x & z) ^ (y & z);
}
bitset<32> RotR(bitset<32> x, unsigned int n) {
    return (x>>n) | (x<<( (-n)&31 ));
}
bitset<32> RotR(bitset<8> x, unsigned int n) {
    bitset<32> b;
    for (unsigned int i = 0; i < 8; i++) {
        b[i] = x[i];
    }
    return RotR(b, n);
}
bitset<32> ShR(bitset<32> x, unsigned int n) {
    return (x >> n);
}
// upper sigma
bitset<32> sum0(bitset<32> x) {
    return RotR(x, 2) ^ RotR(x, 13) ^ RotR(x, 22);
}
bitset<32> sum1(bitset<32> x) {
    return RotR(x, 6) ^ RotR(x, 11) ^ RotR(x, 25);
}
// lower sigma
bitset<32> sig0(bitset<32> x) {
    return RotR(x, 7) ^ RotR(x, 18) ^ ShR(x, 3);
}
bitset<32> sig1(bitset<32> x) {
    return RotR(x, 17) ^ RotR(x, 19) ^ ShR(x, 10);
}

// K consists of 64 binary words given by the 32 first bits of the fractional parts of the cube roots of the first 64 prime numbers
static constexpr bitset<32> K[] = { 
0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,
0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,
0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,
0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
};

// 8 variables are set to their initial values, given by the first 32 bits of the fractional part of the square roots of the first 8 prime numbers
static constexpr bitset<32> H[] = {
    0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19
};

bitset<32> SubBitset(bitset<512> b, int start) {
    bitset<32> sub;
    for (int i = 0; i < 32; i++) {
        int pos = start + i;
        sub[i] = b[pos];
    }
    return sub;
}

bitset<8> SubBitset(bitset<64> b, int start) {
    bitset<8> sub;
    for (int i = 0; i < 8; i++) {
        int pos = start + i;
        sub[i] = b[pos];
    }
    return sub;
}

bitset<256> ConcatBitsets(bitset<32> sets[8]) {
    bitset<256> out;
    for (size_t i = 0; i < 256; i++) {
        size_t subset = i / 32;
        out[i] = sets[subset][i % 32];
    }
    return out;
}

bitset<512> ConcatBitsets(bitset<8> sets[64]) {
    bitset<512> out;
    for (size_t i = 0; i < 512; i++) {
        size_t subset = i / 8;
        out[i] = sets[subset][i % 8];
    }
    return out;
}

Block& DecomposeBlock(Block& block) {
    // first 16 partials constructed by 32 bit blocks of M
    for (int i = 0; i < 16; i++) {
        block.W[i] = SubBitset(block.M, 32*i);
    }
    // last 48 partials generated by bit manipulation of the previous 32 bit blocks
    for (int j = 16; j < 64; j++) {
        block.W[j] = sig1(block.W[j-2]) + block.W[j-7] + sig0(block.W[j-15]) + block.W[j-16];
    }
    return block;
}

bitset<32> operator+(const bitset<32>& lhs, const bitset<32>& rhs) {
    // ullong sum = lhs.to_ullong() + rhs.to_ullong();
    bitset<32> out;
    bool carry = false;
    for (int i = 0; i < 32; i++) {
        out[i] = (lhs[i] + rhs[i] + carry) % 2;
        carry = (lhs[i] + rhs[i] + carry) > 1;
    }
    return out;
}

string operator&(const Hash& h) {
    unsigned int p[64];
    for (size_t i = 0; i < 256; i+=4) {
        p[i / 4] = h.hash[i] + 2*h.hash[i+1] + 4*h.hash[i+2] + 8*h.hash[i+3];
    }
    std::stringstream stream;
    stream << "0x";
    for (size_t j = 0; j < 64; j++) {
        stream << hex << p[j];
    }
    return stream.str();
}

Hash ComputeSHA256(vector<Block>& blocks, int num_rounds) { // make sure to decompose each block before running this    
    bitset<32> prevH[8]; // initialization of prevH to defaults
    for (size_t i = 0; i < 8; i++) {
        prevH[i] = H[i];
    }
    for (size_t i = 0; i < blocks.size(); i++) {

        Block& cur_block = blocks.at(i);
        bitset<32> a = prevH[3];
        bitset<32> b = prevH[2];
        bitset<32> c = prevH[1];
        bitset<32> d = prevH[0];
        bitset<32> e = prevH[7];
        bitset<32> f = prevH[6];
        bitset<32> g = prevH[5];
        bitset<32> h = prevH[4];
        
        for (int round = 0; round < num_rounds; round++) {
            bitset<32> T1 = h + sum1(e) + Ch(e,f,g) + K[round] + cur_block.W[round];
            bitset<32> T2 = sum0(a) + Maj(a,b,c);
            h = g;
            g = f;
            f = e;
            e = d + T1;
            d = c;
            c = b;
            b = a;
            a = T1 + T2;
            
            prevH[0] = prevH[0] + a;
            prevH[1] = prevH[1] + b;
            prevH[2] = prevH[2] + c;
            prevH[3] = prevH[3] + d;
            prevH[4] = prevH[4] + e;
            prevH[5] = prevH[5] + f;
            prevH[6] = prevH[6] + g;
            prevH[7] = prevH[7] + h;
        }
    }
    // construct hash with concat
    Hash hash = Hash();
    hash.hash = ConcatBitsets(prevH);
    return hash;
}

Hash ComputeHashV3(vector<Block>& blocks, int num_rounds) { // make sure to decompose each block before running this    
    bitset<32> prevH[8]; // initialization of prevH to defaults
    for (size_t i = 0; i < 8; i++) {
        prevH[i] = H[i];
    }
    for (size_t i = 0; i < blocks.size(); i++) {

        Block& cur_block = blocks.at(i);
        bitset<32> a = prevH[0];
        bitset<32> b = prevH[1];
        bitset<32> c = prevH[2];
        bitset<32> d = prevH[3];
        bitset<32> e = prevH[4];
        bitset<32> f = prevH[5];
        bitset<32> g = prevH[6];
        bitset<32> h = prevH[7];
        
        for (int round = 0; round < num_rounds; round++) {
            bitset<32> T1 = h + sum1(e) + Ch(e,f,g) + K[round] + cur_block.W[round];
            bitset<32> T2 = sum0(a) + Maj(a,b,c);
            h = g;
            g = f;
            f = e;
            e = d + T1;
            d = c;
            c = b;
            b = a;
            a = T1 + T2;
            
            prevH[0] = prevH[0] + a;
            prevH[1] = prevH[1] + b;
            prevH[2] = prevH[2] + c;
            prevH[3] = prevH[3] + d;
            prevH[4] = prevH[4] + e;
            prevH[5] = prevH[5] + f;
            prevH[6] = prevH[6] + g;
            prevH[7] = prevH[7] + h;
        }
    }
    // construct hash with concat
    Hash hash = Hash();
    hash.hash = ConcatBitsets(prevH);
    return hash;
}

vector<Block> StringToBit(string str) {
    size_t length = str.length();
    size_t pos_in_str = 0;
    size_t num_blocks = (length + 8) / 64 + 1;
    bool end_of_string = false;
    vector<Block> blocks;
    for (unsigned int i = 0; i < num_blocks; i++) {
        bitset<8> letters[64];
        for (unsigned int j = 0; j < 64; j++) {
            bitset<8> letter;
            if (pos_in_str < length) {
                letter = bitset<8>(str.at(pos_in_str++));
            } else if (!end_of_string) {
                end_of_string = true;
                letter[0] = 1;
            }

            letters[j] = letter;

            // add 64 bit length representation at end
            if (i == num_blocks - 1 && j >= 56) {
                if (j > 56) throw std::invalid_argument("overshot target");
                bitset<64> len = bitset<64>(length);
                for (size_t idx = 56; idx < 64; idx++) {
                    letters[idx] = SubBitset(len, (idx - 56) * 8);
                }
                break;
            }
        }

        // for (bitset<8> letter : letters) {
        //     cout << letter << endl;
        // }
        Block b = Block();
        b.M = ConcatBitsets(letters);
        blocks.push_back(b);
    }
    return blocks;


}

string HashV1(string input) {
    vector<Block> padded_blocks = StringToBit(input);
    for (size_t i = 0; i < padded_blocks.size(); i++) {
        DecomposeBlock(padded_blocks.at(i));
    }
    Hash hash_obj = ComputeSHA256(padded_blocks, 64);
    return &hash_obj;
}

string HashV2(string input) {
    vector<Block> padded_blocks = StringToBit(input);
    for (size_t i = 0; i < padded_blocks.size(); i++) {
        DecomposeBlock(padded_blocks.at(i));
    }
    Hash hash_obj = ComputeSHA256(padded_blocks, 256);
    return &hash_obj;
}

string HashV3(string input) {
    vector<Block> padded_blocks = StringToBit(input);
    for (size_t i = 0; i < padded_blocks.size(); i++) {
        DecomposeBlock(padded_blocks.at(i));
    }
    Hash hash_obj = ComputeHashV3(padded_blocks, 64);
    return &hash_obj;
}


#endif // HASHALGORITHM_HPP